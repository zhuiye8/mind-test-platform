// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 考试状态枚举 - 5状态生命周期管理
enum ExamStatus {
  DRAFT      // 草稿 - 考试未发布
  PUBLISHED  // 进行中 - 考试已发布，学生可以参与
  EXPIRED    // 已停止 - 考试被强制停止
  SUCCESS    // 已结束 - 考试正常结束
  ARCHIVED   // 已归档 - 考试被归档到回收站
}

// AI会话状态枚举
enum SessionStatus {
  ACTIVE
  ENDED
  PENDING_FLUSH
}

// AI模型枚举
enum AiModel {
  FACE
  ATTENTION
  PPG
  AUDIO
  POSE
  IDENTITY
}

// 异常严重程度枚举
enum Severity {
  LOW
  MEDIUM
  HIGH
}

// 附件类型枚举
enum AttachmentType {
  THUMBNAIL
  KEYFRAME
  METRIC_DUMP
  MEDIA_CLIP
}

// 学生作答行为事件类型枚举
enum QuestionActionType {
  DISPLAY   // 题目呈现
  SELECT    // 选择（首次选择）
  DESELECT  // 取消选择（多选题）
  CHANGE    // 更改（单选/文本从A→B）
  NAVIGATE  // 导航（从题X跳到题Y）
  FOCUS     // 聚焦输入框
  BLUR      // 离开输入框
}

// 教师表
model Teacher {
  id           String   @id @default(uuid())
  teacherId    String   @unique @map("teacher_id")
  name         String
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 关系
  papers Paper[]
  exams  Exam[]

  @@map("teachers")
}

// 试卷模板表
model Paper {
  id          String   @id @default(uuid())
  teacherId   String   @map("teacher_id")
  title       String
  description String?
  scaleType   String   @default("flat") @map("scale_type") // 'grouped'/'flat' - 量表类型
  showScores  Boolean  @default(false) @map("show_scores") // 是否显示分数给学生
  scaleConfig Json?    @map("scale_config") // 量表配置信息
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关系
  teacher   Teacher    @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  questions Question[]
  exams     Exam[]
  scales    Scale[]

  // 数据库索引优化
  @@index([teacherId, createdAt(sort: Desc)]) // 按教师ID和创建时间查询试卷列表
  @@index([teacherId, title]) // 按教师ID和标题搜索
  @@map("papers")
}

// 量表维度表 - 管理量表分组（心理测试的维度概念）
model Scale {
  id          String   @id @default(uuid())
  paperId     String   @map("paper_id")
  scaleName   String   @map("scale_name") // "家庭生活"、"分离焦虑"等维度名称
  scaleOrder  Int      @map("scale_order") // 显示顺序
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 关系
  paper     Paper      @relation(fields: [paperId], references: [id], onDelete: Cascade)
  questions Question[]

  // 数据库索引优化
  @@index([paperId, scaleOrder]) // 按试卷ID和顺序查询维度
  @@map("scales")
}

// 题目表 - 支持条件逻辑和量表分组
model Question {
  id               String   @id @default(uuid())
  paperId          String   @map("paper_id")
  scaleId          String?  @map("scale_id") // 关联的量表维度ID（可为空，支持扁平结构）
  questionOrder    Int      @map("question_order")
  title            String
  options          Json     // PostgreSQL JSONB字段
  questionType     String   @default("single_choice") @map("question_type")
  displayCondition Json?    @map("display_condition") // PostgreSQL JSONB字段
  scoreValue       Int?     @map("score_value") // 题目基础分值
  isScored         Boolean  @default(true) @map("is_scored") // 是否计分（排除填充题）
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // 关系
  paper     Paper              @relation(fields: [paperId], references: [id], onDelete: Cascade)
  scale     Scale?             @relation(fields: [scaleId], references: [id], onDelete: SetNull)
  responses QuestionResponse[]
  audio     QuestionAudio?     // 一对一关系
  actionEvents QuestionActionEvent[] // 一对多关系

  // 数据库索引优化
  @@index([paperId, questionOrder]) // 按试卷ID和题目顺序查询题目
  @@index([paperId, createdAt(sort: Desc)]) // 按试卷ID和创建时间查询
  @@index([scaleId, questionOrder]) // 按维度ID和题目顺序查询
  @@map("questions")
}

// 考试实例表
model Exam {
  id                   String    @id @default(uuid())
  paperId              String    @map("paper_id")
  teacherId            String    @map("teacher_id")
  publicUuid           String    @unique @default(uuid()) @map("public_uuid")
  title                String
  questionIdsSnapshot  Json      @map("question_ids_snapshot") // PostgreSQL JSONB字段
  shuffleQuestions     Boolean   @default(false) @map("shuffle_questions")
  password             String?
  startTime            DateTime? @map("start_time")
  endTime              DateTime? @map("end_time")
  durationMinutes      Int       @map("duration_minutes")
  allowMultipleSubmissions Boolean @default(false) @map("allow_multiple_submissions") // 是否允许多次提交
  status               ExamStatus @default(DRAFT)
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // 关系
  paper   Paper        @relation(fields: [paperId], references: [id], onDelete: Restrict)
  teacher Teacher      @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  results ExamResult[]
  aiSessions AiSession[]

  // 数据库索引优化
  @@index([teacherId, status, createdAt(sort: Desc)]) // 按教师ID、状态和创建时间查询考试列表
  @@index([teacherId, title]) // 按教师ID和标题搜索考试
  @@index([status, startTime, endTime]) // 按状态和时间范围查询考试
  @@index([status, updatedAt(sort: Desc)]) // 按状态和更新时间查询（用于归档列表）
  @@index([teacherId, status]) // 按教师ID和状态筛选（用于状态统计）
  @@index([publicUuid]) // 公共访问UUID查询（已有unique自带索引但明确标注）
  @@map("exams")
}

// 题目作答记录表 - 记录每题详细作答数据和时间戳
model QuestionResponse {
  id                    String    @id @default(uuid())
  examResultId          String    @map("exam_result_id")
  questionId            String    @map("question_id")
  questionOrder         Int       @map("question_order") // 题目顺序
  responseValue         String    @map("response_value") // 用户选择（如：'A', 'B', '多选答案'）
  responseScore         Int?      @map("response_score") // 本题得分
  questionDisplayedAt   DateTime? @map("question_displayed_at") // 题目开始显示时间
  responseSubmittedAt   DateTime  @default(now()) @map("response_submitted_at") // 提交答案时间
  timeToAnswerSeconds   Int?      @map("time_to_answer_seconds") // 作答用时（秒）
  createdAt             DateTime  @default(now()) @map("created_at")

  // 关系
  examResult ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Restrict)

  // 数据库索引优化 - 支持AI分析查询
  @@index([examResultId, questionOrder]) // 按考试结果ID和题目顺序查询
  @@index([questionDisplayedAt, responseSubmittedAt]) // 时间戳范围查询
  @@index([questionId, timeToAnswerSeconds]) // 按题目和作答时长分析
  
  // 唯一约束：防止同一考试结果重复记录同一题目
  @@unique([examResultId, questionId])
  @@map("question_responses")
}

// 考试结果表
model ExamResult {
  id                      String    @id @default(uuid())
  examId                  String    @map("exam_id")
  participantId           String    @map("participant_id")
  participantName         String    @map("participant_name")
  answers                 Json      // PostgreSQL JSONB字段（保持向后兼容）
  score                   Int
  totalQuestions          Int?      @map("total_questions") // 总题数
  answeredQuestions       Int?      @map("answered_questions") // 已答题数
  totalTimeSeconds        Int?      @map("total_time_seconds") // 总用时（秒）
  scaleScores            Json?     @map("scale_scores") // 各维度得分 {"家庭生活": 45, "学业表现": 28}
  ipAddress              String?   @map("ip_address")
  startedAt              DateTime? @map("started_at")
  submittedAt            DateTime  @default(now()) @map("submitted_at")

  // AI功能相关字段（简化）
  aiSessionId            String?   @map("ai_session_id") // AI分析会话ID（关联键）
  
  // 关系
  exam              Exam                  @relation(fields: [examId], references: [id], onDelete: Cascade)
  questionResponses QuestionResponse[]
  emotionAnalysis   EmotionAnalysis?      // 一对一关系
  aiReports         AIReport[]            // 一对多关系
  interactionData   ExamInteractionData?  // 一对一关系
  aiSessions        AiSession[]           // 一对多关系
  actionEvents      QuestionActionEvent[] // 一对多关系

  // 数据库索引优化
  @@index([examId, submittedAt(sort: Desc)]) // 按考试ID和提交时间查询结果列表
  @@index([examId, score(sort: Desc)]) // 按考试ID和分数排序查询
  @@index([examId, participantName]) // 按考试ID和参与者姓名搜索
  @@index([submittedAt(sort: Desc)]) // 按提交时间查询所有结果
  @@index([totalTimeSeconds]) // 按总用时查询（AI分析用）
  @@index([aiSessionId]) // AI会话查询优化

  // 唯一约束：防止重复提交
  @@unique([examId, participantId])
  @@map("exam_results")
}

// 情绪分析表
model EmotionAnalysis {
  id                    String    @id @default(uuid())
  examResultId          String    @unique @map("exam_result_id")
  sessionId             String    @unique @map("session_id") // WebSocket会话ID
  startTime             DateTime  @map("start_time")
  endTime               DateTime? @map("end_time")
  totalDuration         Int?      @map("total_duration") // 总时长（毫秒）
  framesSent            Int?      @map("frames_sent") // 发送的视频帧数
  dataPoints            Json?     @map("data_points") // 情绪数据点数组
  summary               Json?     @map("summary") // 情绪分析摘要
  apiProvider           String?   @map("api_provider") // API提供商（如"hume_ai", "affectiva"）
  apiVersion            String?   @map("api_version") // API版本
  status                String    @default("active") @map("status") // active, completed, failed
  createdAt             DateTime  @default(now()) @map("created_at")
  
  // 关系
  examResult ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  
  // 索引优化
  @@index([sessionId])
  @@index([startTime, endTime])
  @@index([status])
  @@map("emotion_analysis")
}

// AI报告表
model AIReport {
  id                    String    @id @default(uuid())
  examResultId          String    @map("exam_result_id")
  reportType            String    @map("report_type") // basic, detailed, comprehensive
  status                String    @default("generating") @map("status") // generating, completed, failed
  progress              Int       @default(0) @map("progress") // 0-100
  content               Json?     @map("content") // 报告内容JSON
  downloadUrl           String?   @map("download_url") // 下载链接
  filename              String?   @map("filename") // 文件名
  fileFormat            String?   @map("file_format") // pdf, docx, txt
  fileSize              Int?      @map("file_size") // 文件大小（字节）
  language              String    @default("zh-CN") @map("language") // 报告语言
  aiProvider            String?   @map("ai_provider") // AI服务提供商
  aiModel               String?   @map("ai_model") // AI模型名称
  generationTime        Int?      @map("generation_time") // 生成耗时（毫秒）
  expiresAt             DateTime? @map("expires_at") // 下载链接过期时间
  error                 String?   @map("error") // 错误信息
  createdAt             DateTime  @default(now()) @map("created_at")
  completedAt           DateTime? @map("completed_at")
  
  // 关系
  examResult ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  
  // 索引优化
  @@index([examResultId, createdAt(sort: Desc)])
  @@index([status])
  @@index([reportType])
  @@index([expiresAt])
  @@map("ai_reports")
}

// 题目语音文件表 - V1.0.1 新增语音文件管理
model QuestionAudio {
  id               String    @id @default(uuid())
  questionId       String    @unique @map("question_id")
  filename         String    // 原始文件名
  filePath         String    @map("file_path") // 服务器存储路径
  fileUrl          String    @map("file_url")  // 访问URL
  fileSize         Int?      @map("file_size") // 文件大小(字节)
  duration         Float?    // 音频时长(秒)
  format           String    @default("mp3") // 音频格式
  voiceSettings    Json?     @map("voice_settings") // 语音合成设置
  contentHash      String    @map("content_hash") // 题目内容哈希，用于检测内容变化
  status           String    @default("pending") @map("status") // pending, generating, ready, error
  error            String?   @map("error") // 错误信息
  
  // 百度TTS异步任务相关字段
  ttsTaskId        String?   @map("tts_task_id") // 百度TTS任务ID
  ttsProvider      String?   @default("baidu") @map("tts_provider") // TTS服务提供商
  ttsTaskStatus    String?   @map("tts_task_status") // Running, Success, Failure
  ttsTaskCreatedAt DateTime? @map("tts_task_created_at") // 任务创建时间
  ttsSpeechUrl     String?   @map("tts_speech_url") // 百度TTS返回的音频下载URL
  ttsAttempts      Int       @default(0) @map("tts_attempts") // 重试次数
  
  generatedAt      DateTime? @map("generated_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  // 关系
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // 索引优化
  @@index([questionId])
  @@index([status])
  @@index([contentHash])
  @@index([generatedAt])
  @@index([ttsTaskId]) // 百度TTS任务查询
  @@index([ttsTaskStatus, ttsTaskCreatedAt]) // 任务状态和创建时间查询
  @@index([ttsProvider, status]) // 按TTS提供商和状态查询
  @@map("question_audio")
}

// 考试交互数据表 - 存储前端生成的交互数据
model ExamInteractionData {
  id                String   @id @default(uuid())
  examResultId      String   @unique @map("exam_result_id")
  timelineData      Json?    @map("timeline_data") // 时间线数据
  voiceInteractions Json?    @map("voice_interactions") // 语音交互数据
  deviceTestResults Json?    @map("device_test_results") // 设备测试结果
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // 关系
  examResult ExamResult @relation(fields: [examResultId], references: [id], onDelete: Cascade)
  
  // 索引优化
  @@index([examResultId])
  @@map("exam_interaction_data")
}

// AI会话表 - 核心会话管理
model AiSession {
  id               String        @id @default(uuid())
  examId           String?
  examResultId     String?
  station_id       String?
  room_id          String?
  started_at       DateTime
  ended_at         DateTime?
  status           SessionStatus @default(ACTIVE)
  ai_version       String?
  retention_ttl_sec Int          @default(86400)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  exam             Exam?         @relation(fields: [examId], references: [id])
  examResult       ExamResult?   @relation(fields: [examResultId], references: [id])
  aggregates       AiAggregate[]
  anomalies        AiAnomaly[]
  checkpoints      AiCheckpoint[]
  attachments      AiAttachment[]
  idempotency      AiFinalizeIdemp[]

  @@index([examId, started_at])
  @@index([examResultId, started_at])
  @@map("ai_sessions")
}

// AI聚合数据表
model AiAggregate {
  id          String   @id @default(uuid())
  aiSessionId String
  model       AiModel
  key         String
  value_json  Json     // JSONB
  createdAt   DateTime @default(now())

  session     AiSession @relation(fields: [aiSessionId], references: [id])

  @@index([aiSessionId, model, key])
  @@map("ai_aggregates")
}

// AI异常检测表
model AiAnomaly {
  id            String   @id @default(uuid())
  aiSessionId   String
  code          String
  severity      Severity
  from_ts       DateTime
  to_ts         DateTime
  evidence_json Json     // JSONB（缩略图/关键帧列表等）
  createdAt     DateTime @default(now())

  session       AiSession @relation(fields: [aiSessionId], references: [id])

  @@index([aiSessionId, code, from_ts])
  @@map("ai_anomalies")
}

// AI检查点表 - 时间序列快照
model AiCheckpoint {
  id            String   @id @default(uuid())
  aiSessionId   String
  timestamp     DateTime
  snapshot_json Json     // JSONB（最近窗口指标）
  createdAt     DateTime @default(now())

  session       AiSession @relation(fields: [aiSessionId], references: [id])

  @@unique([aiSessionId, timestamp])
  @@map("ai_checkpoints")
}

// AI附件表
model AiAttachment {
  id          String   @id @default(uuid())
  aiSessionId String
  type        AttachmentType
  path        String
  sha256      String
  size        Int
  createdAt   DateTime @default(now())

  session     AiSession @relation(fields: [aiSessionId], references: [id])

  @@unique([sha256])
  @@index([aiSessionId, type])
  @@map("ai_attachments")
}

// AI最终化幂等表
model AiFinalizeIdemp {
  id               String   @id @default(uuid())
  aiSessionId      String
  idempotency_key  String
  createdAt        DateTime @default(now())

  session          AiSession @relation(fields: [aiSessionId], references: [id])

  @@unique([aiSessionId, idempotency_key])
  @@map("ai_finalize_idemp")
}

// 学生作答事件表（结构化时间线，用于还原"显示/选择/修改/回看"等行为）
model QuestionActionEvent {
  id              String   @id @default(uuid())
  examResultId    String
  questionId      String
  event_type      QuestionActionType
  payload_json    Json?    // { option_before, option_after, source: 'click|voice', from, to, ... }
  occurred_at     DateTime // 事件发生时刻（ISO）
  createdAt       DateTime @default(now())

  examResult      ExamResult @relation(fields: [examResultId], references: [id])
  question        Question   @relation(fields: [questionId], references: [id])

  @@index([examResultId, occurred_at])
  @@index([examResultId, questionId, occurred_at])
  @@map("question_action_events")
}